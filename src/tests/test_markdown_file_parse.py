# Generated by CodiumAI
from markdown_tools.markdown_file import MarkdownSourceText
from pathlib import Path
from markdown_tools.markdown_file import MarkdownFile
from markdown_tools.markdown_file import MarkdownBlock
from markdown_tools.markdown_file import SourceCode
from markdown_tools.markdown_file import CodePath


class TestParse:
    # Parses a markdown file with only markdown blocks
    def test_parse_only_markdown_blocks(self):
        with open("test.md", "w") as f:
            f.write("This is a markdown block")
        md_source = MarkdownSourceText(Path("test.md"))
        parsed_contents = list(MarkdownFile.parse(md_source))
        assert len(parsed_contents) == 1
        assert isinstance(parsed_contents[0], MarkdownBlock)
        assert parsed_contents[0].text == "This is a markdown block"

    # Parses a markdown file with only source code listings
    # def test_parse_only_source_code_listings(self):
    #     md_source = MarkdownSourceText(Path("test.md"))
    #     md_source.lines = [
    #         "```python",
    #         "print('Hello, World!')",
    #         "```",
    #     ]
    #     parsed_contents = list(MarkdownFile.parse(md_source))
    #     assert len(parsed_contents) == 1
    #     assert isinstance(parsed_contents[0], SourceCode)
    #     assert parsed_contents[0].language == "python"
    #     assert parsed_contents[0].code == "print('Hello, World!')"

    # Parses a markdown file with only code paths
    def test_parse_only_code_paths(self):
        # Create a temporary file at "test.md"
        with open("test.md", "w") as f:
            f.write("")

        md_source = MarkdownSourceText(Path("test.md"))
        md_source.lines = ["%%", "path: /path/to/code", "%%"]
        parsed_contents = list(MarkdownFile.parse(md_source))
        assert len(parsed_contents) == 1
        assert isinstance(parsed_contents[0], CodePath)
        assert parsed_contents[0].path == "/path/to/code"

    # Parses an empty markdown file
    def test_parse_empty_file(self):
        # Create an empty markdown file
        with open("test.md", "w") as f:
            pass

        md_source = MarkdownSourceText(Path("test.md"))
        parsed_contents = list(MarkdownFile.parse(md_source))
        assert len(parsed_contents) == 0

    # Parses a markdown file with only a single line
    def test_parse_single_line(self):
        md_source = MarkdownSourceText(Path("test.md"))
        md_source.lines = ["This is a single line"]
        parsed_contents = list(MarkdownFile.parse(md_source))
        assert len(parsed_contents) == 1
        assert isinstance(parsed_contents[0], MarkdownBlock)
        assert parsed_contents[0].text == "This is a single line"

    # # Parses a markdown file with a source code listing that has no language name
    # def test_parse_source_code_listing_no_language_name(self):
    #     md_source = MarkdownSourceText(Path("test.md"))
    #     md_source.lines = ["```", "print('Hello, World!')", "```"]
    #     parsed_contents = list(MarkdownFile.parse(md_source))
    #     assert len(parsed_contents) == 1
    #     assert isinstance(parsed_contents[0], SourceCode)
    #     assert parsed_contents[0].language == ""
    #     assert parsed_contents[0].code == "print('Hello, World!')"
