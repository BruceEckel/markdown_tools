# Generated by CodiumAI
from pathlib import Path
from markdown_tools import MarkdownSourceText
from markdown_tools import MarkdownBlock


class TestMarkdownBlock:
    # can parse a simple markdown block with no special characters using a Path object
    def test_parse_simple_markdown_block_with_path_object(self):
        # Create a temporary file with the desired content
        file_path = Path("test.md")
        file_path.write_text("This is a simple markdown block")

        # Create the MarkdownSourceText object with the file path
        md_source = MarkdownSourceText(file_path)

        # Parse the MarkdownBlock
        block = MarkdownBlock.parse(md_source)

        # Assert the text is correct
        assert block.text == "This is a simple markdown block"

        # Clean up the temporary file
        # file_path.unlink()

    # can parse a markdown block with special characters
    def test_parse_markdown_block_with_special_characters(self):
        md_source = MarkdownSourceText(Path("test.md"))
        md_source.lines = [
            "This is a markdown block with special characters: !@#$%^&*()"
        ]
        block = MarkdownBlock.parse(md_source)
        assert (
            block.text
            == "This is a markdown block with special characters: !@#$%^&*()"
        )

    # # can parse a markdown block with multiple lines (fixed)
    # def test_parse_markdown_block_with_multiple_lines_fixed(self):
    #     md_source = MarkdownSourceText(Path("test.md"))
    #     md_source.lines = [
    #         "This is the first line",
    #         "This is the second line",
    #         "This is the third line",
    #     ]
    #     block = MarkdownBlock.parse(md_source)
    #     assert (
    #         block.text
    #         == "This is the first line\nThis is the second line\nThis is the third line"
    #     )

    # # can parse an empty markdown block
    # def test_parse_empty_markdown_block(self):
    #     md_source = MarkdownSourceText(Path("test.md"))
    #     md_source.lines = []
    #     block = MarkdownBlock.parse(md_source)
    #     assert block.text == ""

    # # can parse a markdown block with only whitespace
    # def test_parse_markdown_block_with_whitespace(self):
    #     md_source = MarkdownSourceText(Path("test.md"))
    #     md_source.lines = ["   ", "  ", " "]
    #     block = MarkdownBlock.parse(md_source)
    #     assert block.text == "   \n  \n "

    # # can parse a markdown block with only one special character
    # def test_parse_markdown_block_with_one_special_character(self):
    #     md_source = MarkdownSourceText(Path("test.md"))
    #     md_source.lines = ["!"]
    #     block = MarkdownBlock.parse(md_source)
    #     assert block.text == "!"
